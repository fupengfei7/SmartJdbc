package io.itit.smartjdbc.dao;

import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.mysql.jdbc.Statement;

import io.itit.smartjdbc.ResultSetHandler;
import io.itit.smartjdbc.datasource.ConnectionManager;
import io.itit.smartjdbc.util.DBStat;
import io.itit.smartjdbc.util.DumpUtil;
import io.itit.smartjdbc.util.JdbcUtil;

/**
 * 
 * @author skydu
 *
 */
public abstract class BaseDAO{
	//
	private static Logger logger=LoggerFactory.getLogger(BaseDAO.class);
	//
	private  static long SLOW_SQL_MIN_USE_TIME=1000;//1s
	//
	private int executeUpdate(Connection conn,PreparedStatement ps,boolean returnAutoGeneratedKeys)
	throws SQLException{
		ResultSet rs=null;
		try {
			int rowCount = ps.executeUpdate();
			if(returnAutoGeneratedKeys){//
				int autoIncrease = -1;
				rs = ps.getGeneratedKeys();
				if (rs.next()) {
					autoIncrease = rs.getInt(1);
				}
				return autoIncrease;
			}
			return rowCount;
		} catch (SQLException e) {
			throw e;
		}finally {
			JdbcUtil.close(ps,rs);
		}
	}

	//
	private int[] executeBatch(Connection conn,PreparedStatement ps)
	throws SQLException{
				ResultSet rs=null;
				try {
					return ps.executeBatch();
				} catch (SQLException e) {
					throw e;
				}finally {
					JdbcUtil.close(ps,rs);
				}
			}
	
	protected int executeWithGenKey(String sql,boolean returnAutoGeneratedKeys,Object ... parameters){
		return executeUpdate0(sql, true, parameters);
	}
	
	//
	protected int executeUpdate0(String sql,boolean returnAutoGeneratedKeys,Object ... parameters){
		int result=-1;
		long startTime=System.currentTimeMillis();
		long useTime=0;
		boolean isException=false;
		try {
			Connection conn=ConnectionManager.getConnection();
			PreparedStatement ps = conn.prepareStatement(sql.toString(),
					returnAutoGeneratedKeys ? Statement.RETURN_GENERATED_KEYS:Statement.NO_GENERATED_KEYS);
			int index = 1;
			if(parameters!=null){
				for (Object parameter : parameters) {
					ps.setObject(index++, parameter);
				}
			}
			result=executeUpdate(conn, ps,returnAutoGeneratedKeys);
			useTime=System.currentTimeMillis()-startTime;
			return result;
		} catch (Throwable e) {
			isException=true;
			throw new RuntimeException(e.getMessage(),e);
		}finally {
			if(logger.isInfoEnabled()){
				logger.info("executeUpdate \nisException:{} \nuseTime:{}ms \nresult:{} \nsql:{} \nparameters:{}\n{}",
						isException,
						useTime,
						result,
						sql,
						parameters==null?0:parameters.length,
						dumpParameters(parameters));
			}
			DBStat.execute(sql,useTime,isException);//stat
			if(!isException&&useTime>=SLOW_SQL_MIN_USE_TIME){
				logger.warn("executeUpdate  \nuseTime:{}ms \nresult:{} \nsql:{} \nparameters:{}\n{}",
						useTime,
						result,
						sql,
						parameters==null?0:parameters.length,
						dumpParameters(parameters));
			}
		}
	}
	//
	protected long executeLargeUpdate(Connection conn,PreparedStatement ps,boolean autoGeneratedKeys)
	throws SQLException{
		ResultSet rs=null;
		try {
			long rowCount = ps.executeLargeUpdate();
			if(autoGeneratedKeys){//
				long autoIncrease = -1;
				rs = ps.getGeneratedKeys();
				if (rs.next()) {
					autoIncrease = rs.getLong(1);
				}
				return autoIncrease;
			}
			return rowCount;
		} catch (SQLException e) {
			throw e;
		}finally {
			JdbcUtil.close(ps,rs);
		}
	}
	//
	private long executeLargeUpdate(String sql,boolean returnAutoGeneratedKeys,Object ... parameters){
		try {
			Connection conn=ConnectionManager.getConnection();
			PreparedStatement ps = conn.prepareStatement(sql.toString(),
					returnAutoGeneratedKeys ? Statement.RETURN_GENERATED_KEYS:Statement.NO_GENERATED_KEYS);
			int index = 1;
			for (Object parameter : parameters) {
				ps.setObject(index++, parameter);
			}
			return executeLargeUpdate(conn, ps,returnAutoGeneratedKeys);
		} catch (Throwable e) {
			logger.error(e.getMessage(), e);
			throw new RuntimeException(e.getMessage(),e);
		}
	}
	//
	private int[] executeBatch(String sql,List<Object[]> parameters){
		int[] result=null;
		long startTime=System.currentTimeMillis();
		long useTime=0;
		boolean isException=false;
		try {
			Connection conn=ConnectionManager.getConnection();
			PreparedStatement ps = conn.prepareStatement(sql.toString());
			if(parameters!=null){
				for (Object[] parameter : parameters) {
					int index = 1;
					for (Object obj : parameter) {
						ps.setObject(index++, obj);
					}
					ps.addBatch();
				}
			}
			result=executeBatch(conn,ps);
			useTime=System.currentTimeMillis()-startTime;
			return result;
		} catch (Throwable e) {
			isException=true;
			throw new RuntimeException(e.getMessage(),e);
		}finally {
			if(logger.isInfoEnabled()){
				logger.info("executeBatch \nisException:{} \nuseTime:{}ms \nresult:{} \nsql:{} \nparameters:{}\n{}",
						isException,
						useTime,
						result,
						sql,
						parameters==null?0:parameters.size(),
						DumpUtil.dump(parameters));
			}
			DBStat.execute(sql,useTime,isException);//stat
			if(!isException&&useTime>=SLOW_SQL_MIN_USE_TIME){
				logger.warn("executeBatch  \nuseTime:{}ms \nresult:{} \nsql:{} \nparameters:{}\n{}",
						useTime,
						result,
						sql,
						parameters==null?0:parameters.size(),
						DumpUtil.dump(parameters));
			}
		}
	}
	//
	public long largeInsert(String sql,boolean returnAutoGeneratedKeys,Object ... parameters){
		return executeLargeUpdate(sql, returnAutoGeneratedKeys, parameters);
	}
	//
	public int insert(String sql,boolean returnAutoGeneratedKeys,Object ... parameters){
		return executeUpdate0(sql, returnAutoGeneratedKeys, parameters);
	}
	//
	public int[] insertBatch(String sql,List<Object[]> parameters){
		return executeBatch(sql, parameters);
	}
	//
	public int executeUpdate(String sql,Object ... parameters){
		return executeUpdate0(sql,false,parameters);
	}
	//
	public <T> T queryForObject(String sql,ResultSetHandler<T> handler,Object ... parameters){
		T bean=null;
		boolean isException=false;
		long startTime=System.currentTimeMillis();
		long useTime=0;
		try {
			Connection conn=ConnectionManager.getConnection();
			PreparedStatement ps = conn.prepareStatement(sql.toString());
			int index = 1;
			for (Object parameter : parameters) {
				ps.setObject(index++, parameter);
			}
			bean=query(conn, ps, handler);
			useTime=System.currentTimeMillis()-startTime;
			return bean;
		} catch (Throwable e) {
			isException=true;
			logger.error(e.getMessage(), e);
			throw new RuntimeException(e.getMessage(),e);
		}finally {
			if(logger.isDebugEnabled()){
				logger.debug("query \nisException:{} \nuseTime:{} \nsql:{} \nparameters:{} \nbean:{}",
						isException,
						useTime,
						sql,
						dumpParameters(parameters),
						DumpUtil.dump(bean));
			}
			DBStat.execute(sql,useTime,isException);//stat
			if(!isException&&useTime>=SLOW_SQL_MIN_USE_TIME){
				logger.warn("query \nisException:{} \nuseTime:{}ms \nsql:{} \nparameters:{} \nbean:{}",
						isException,
						useTime,
						sql,
						dumpParameters(parameters),
						DumpUtil.dump(bean));
			}
		}
	}
	//
	public <T> List<T> queryForList(String sql,ResultSetHandler<T> handler,Object ... parameters){
		List<T> list=null;
		boolean isException=false;
		long startTime=System.currentTimeMillis();
		long useTime=0;
		try {
			Connection conn=ConnectionManager.getConnection();
			PreparedStatement ps = conn.prepareStatement(sql.toString());
			int index = 1;
			for (Object parameter : parameters) {
				ps.setObject(index++, parameter);
			}
			list=queryList(conn, ps, handler);
			useTime=System.currentTimeMillis()-startTime;
			return list;
		} catch (Throwable e) {
			isException=true;
			throw new RuntimeException(e.getMessage(),e);
		}finally {
			if(logger.isDebugEnabled()){
				logger.debug("queryList \nisException:{} \nuseTime:{}ms \nsql:{}\nparameters:{}\nresult:{}",
						isException,
						useTime,
						sql,
						dumpParameters(parameters),
						list==null?0:list.size()
						);
			}
			DBStat.execute(sql,useTime,isException);//stat
			if(!isException&&useTime>=SLOW_SQL_MIN_USE_TIME){
				logger.warn("queryList \nisException:{} \nuseTime:{} \nsql:{}\nparameters:{}\nresult:{}",
						isException,
						useTime,
						sql,
						dumpParameters(parameters),
						list==null?0:list.size()
						);
			}
		}
	}
	
	private String dumpParameters(Object[] parameters) {
		return DumpUtil.dump(parameters);
	}
	//
	private <T> T query(Connection conn,PreparedStatement ps,ResultSetHandler<T> handler) 
	throws Exception{
		ResultSet rs=null;
		try {
			rs = ps.executeQuery();
			if(rs!=null){
				while(rs.next()){
					return handler.handleRow(rs); 
				}
			}
			return null;
		} finally {
			JdbcUtil.close(ps,rs);
		}
	}
	//
	private <T> List<T> queryList(Connection conn,PreparedStatement ps,ResultSetHandler<T> handler) 
	throws Exception{
		ResultSet rs=null;
		try {
			rs = ps.executeQuery();
			List<T> list=new ArrayList<>();
			if(rs!=null){
				while(rs.next()){
					list.add(handler.handleRow(rs)); 
				}
			}
			return list;
		} finally {
			JdbcUtil.close(ps,rs);
		}
	}
	
	//
	protected final Boolean queryForBoolean(String sql,Object ...parameters){
		return  queryForObject(sql,rs->rs.getBoolean(1), parameters);
	}
	//
	protected final String queryForString(String sql,Object ...parameters){
		return  queryForObject(sql,rs->rs.getString(1), parameters);
	}
	//
	protected final Double queryForDouble(String sql,Object ...parameters){
		return  queryForObject(sql,rs->rs.getDouble(1), parameters);
	}
	//
	protected final Float queryForFloat(String sql,Object ...parameters){
		return  queryForObject(sql,rs->rs.getFloat(1), parameters);
	}
	//
	protected final Integer queryForInteger(String sql,Object ...parameters){
		return  queryForObject(sql,rs->rs.getInt(1), parameters);
	}
	//
	protected final Long queryForLong(String sql,Object ...parameters){
		return  queryForObject(sql,rs->rs.getLong(1), parameters);
	}
	//
	protected final Short queryForShort(String sql,Object ...parameters){
		return  queryForObject(sql,rs->rs.getShort(1), parameters);
		
	}
	//
	protected final BigDecimal queryForBigDecimal(String sql,Object ...parameters){
		return  queryForObject(sql,rs->rs.getBigDecimal(1), parameters);
		
	}
	//
	protected final Byte queryForByte(String sql,Object ...parameters){
		return  queryForObject(sql,rs->rs.getByte(1), parameters);
		
	}
	//
	protected final  Date queryForDate(String sql,Object ...parameters){
		return  queryForObject(sql,rs->rs.getTimestamp(1), parameters);
	}
}
